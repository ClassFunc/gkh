
import {z} from "zod";
import {GlobalCommandInputSchema} from "@/types/GlobalCommandInputSchema";
import {getCommandInputDeclarationCode, getParsedData,} from "@/util/commandParser";
import {readTemplate} from "@/commands/index";

const CommandInputSchema = GlobalCommandInputSchema.extend({
    // from commander;
})

type ICommandInput = z.infer<typeof CommandInputSchema>;
let commandInputDeclarationCode = '';
const makeX_DIR = "{{fnName}}";

export function {{fnName}}() {
    const data = getParsedData(arguments, CommandInputSchema)
    commandInputDeclarationCode = getCommandInputDeclarationCode(data);
    const code = get_code(data)
    // implementations
}

function get_code(data: ICommandInput) {
    // work with input
    return readTemplate({
        dir: `{{fnName}}`,
        name: `your_template_name`,
        data: data,
    })
};
