
import {z} from "zod";
import {GlobalCommandInputSchema} from "@/types/GlobalCommandInputSchema";
import {getCommandInputDeclarationCode, getParsedData} from "@/util/commandParser";

const CommandInputSchema = GlobalCommandInputSchema.extend({
    // from commander;
})

type ICommandInput = z.infer<typeof CommandInputSchema>;
let commandInputDeclarationCode = '';
const makeX_DIR = "{{dirName}}";

export function {{fnName}}() {
    const data = getParsedData(arguments, CommandInputSchema)
    commandInputDeclarationCode = getCommandInputDeclarationCode(data);
    const code = get_code(data)
    // implementations
}

function get_code(data: ICommandInput) {
    // work with input

    const fContent = readFileSync(__dirname + `/${makeX_DIR}/templates/${data.type}.ts.hbs`).toString()
    return handlebars.compile(fContent, {
        noEscape: true
    })(data).toString();
};
